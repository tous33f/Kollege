

-- create database kollege;
-- use kollege

-- create table User(
-- 	user_id int primary key auto_increment,
-- 	username varchar(255) unique not null,
-- 	firstname text not null,
-- 	lastname text not null,
-- 	email varchar(255) not null unique,
-- 	password text not null,
-- 	joined_on datetime default(now()),
-- 	avatar_url text not null default(""),
-- 	refresh_token text not null default("")
-- );
-- drop table kollege.User;


-- create table Community(
-- 	community_id int primary key auto_increment,
-- 	comm_name varchar(255) unique not null,
-- 	fullname varchar(255) not null,
-- 	about varchar(101) not null,
-- 	description text,
-- 	type ENUM("Public","Private") not null default("Public"),
-- 	banner_url text default(""),
-- 	owner int ,
-- 	foreign key (owner) references User(user_id) on delete cascade on update cascade
-- );
-- drop table kollege.Community;


-- create table User_has_Community(
-- 	user_id int,
-- 	community_id int,
-- 	role ENUM("Admin","Moderator","Member") default("Member"),
-- 	join_date datetime default(now()),
-- 	foreign key (user_id) references User(user_id) on delete cascade on update cascade,
-- 	foreign key (community_id) references Community(community_id) on delete cascade on update cascade,
-- 	primary key(user_id,community_id)
-- );
-- drop table kollege.User_has_Community;


-- create table Community_Requests(
-- 	user_id int,
-- 	community_id int,
-- 	foreign key (user_id) references User(user_id) on delete cascade on update cascade,
-- 	foreign key (community_id) references Community(community_id) on delete cascade on update cascade
-- );
-- drop table kollege.Community_Requests;


-- create table Tag(
-- 	tag_id int primary key auto_increment,
-- 	tag_name text not null
-- );
-- drop table kollege.Tag;


-- create table Community_has_Tag(
-- 	tag_id int,
-- 	community_id int,
-- 	foreign key (community_id) references Community(community_id) on delete cascade on update cascade,
-- 	foreign key (tag_id) references Tag(tag_id) on delete cascade on update cascade,
-- 	primary key(tag_id,community_id)
-- );
-- drop table kollege.Community_has_Tag;


-- create table Post(
-- 	post_id int primary key auto_increment,
-- 	user_id int,
-- 	community_id int,
-- 	tag_id int,
-- 	title text not null,
-- 	content text not null,
-- 	graphics_url text not null default(""),
-- 	created_on datetime default(now()),
-- 	foreign key (user_id) references User(user_id) on delete set null on update cascade,
-- 	foreign key (community_id) references Community(community_id) on delete set null on update cascade,
-- 	foreign key (tag_id) references Tag(tag_id) on delete set null on update cascade
-- );
-- drop table kollege.Post


-- create table Post_Like(
-- 	user_id int,
-- 	post_id int,
-- 	foreign key (user_id) references User(user_id) on delete cascade on update cascade,
-- 	foreign key (post_id) references Post(post_id) on delete cascade on update cascade,
-- 	primary key (user_id,post_id)
-- );
-- drop table kollege.Post_Like;


-- create table Comment(
-- 	comment_id int primary key auto_increment,
-- 	user_id int not null,
-- 	post_id int not null,
-- 	comment text not null,
-- 	commented_on datetime default(now()),
-- 	foreign key (user_id) references User(user_id) on delete cascade on update cascade,
-- 	foreign key (post_id) references Post(post_id) on delete cascade on update cascade
-- );
-- drop table kollege.Comment;


-- create table Comment_Like(
-- 	user_id int,
-- 	comment_id int,
-- 	foreign key (user_id) references User(user_id) on delete cascade on update cascade,
-- 	foreign key (comment_id) references Comment(comment_id) on delete cascade on update cascade,
-- 	primary key (user_id,comment_id)
-- );
-- drop table kollege.Post_Like;


-- create table Reply(
-- 	reply_id int primary key auto_increment,
-- 	user_id int not null,
-- 	comment_id int not null,
-- 	comment text not null,
-- 	commented_on datetime default(now()),
-- 	foreign key (user_id) references User(user_id) on delete cascade on update cascade,
-- 	foreign key (comment_id) references Comment(comment_id) on delete cascade on update cascade
-- );
-- drop table kollege.Reply;


-- create table Event(
-- 	event_id int primary key auto_increment,
-- 	title varchar(255) not null,
-- 	description text not null,
-- 	start datetime not null,
-- 	end datetime not null,
-- 	type ENUM("Online","Onsite") not null default("Online"),
-- 	community_id int,
-- 	foreign key (community_id) references Community(community_id) on delete set null on update cascade
-- );
-- drop table kollege.Event; 


-- create table Course(
-- 	course_id int primary key auto_increment,
-- 	community_id int not null,
-- 	name varchar(255) not null,
-- 	about text not null,
-- 	banner_url text default(""),
-- 	foreign key (community_id) references Community(community_id) on delete cascade on update cascade
-- );
-- drop table kollege.Course;


-- create table Video(
-- 	video_id int primary key auto_increment,
-- 	course_id int not null,
-- 	title varchar(255) not null,
-- 	description text,
-- 	video_url text not null,
-- 	foreign key (course_id) references Course(course_id) on delete cascade on update cascade
-- );
-- drop table kollege.Video


-- show tables;


--  select * from kollege.User u ;
-- select * from kollege.Community c ;
-- select * from kollege.User_has_Community uhc ;
-- select * from kollege.Community_Requests c;
-- select * from kollege.Tag t;
-- select * from kollege.Community_has_Tag cht;
-- select * from kollege.Post p;
-- select * from kollege.Post_Like pk;
-- select * from kollege.Comment;
-- select * from Comment_Like;
-- select * from kollege.Reply;
-- select * from kollege.Course;
-- select * from kollege.Video;
 

-- INSERT INTO User (username, firstname, lastname, email, password) 
-- VALUES 
--     ('johndoe', 'John', 'Doe', 'johndoe@example.com', '12345'),
--     ('janesmith', 'Jane', 'Smith', 'janesmith@example.com', '12345'),
--     ('mikejohnson', 'Mike', 'Johnson', 'mikejohnson@example.com', '12345'),
--     ('emilyclark', 'Emily', 'Clark', 'emilyclark@example.com', '12345'),
--     ('sarahlee', 'Sarah', 'Lee', 'sarahlee@example.com', '12345');


-- INSERT INTO Community (comm_name, fullname, about, description, type, owner) 
-- VALUES 
--     ('tech_gurus', 'Tech Gurus Community', 'A place for tech enthusiasts', 'Discuss latest technologies, trends, and tutorials.', 'Public', 1),
--     ('bookworms', 'Book Lovers Hub', 'For avid readers and book lovers', 'Share reviews, discuss authors, and recommend books.', 'Private', 2),
--     ('fitness_freaks', 'Fitness Enthusiasts Group', 'Promote health and fitness', 'Exchange tips, workouts, and healthy recipes.', 'Public', 3),
--     ('movie_maniacs', 'Movie Buffs Lounge', 'For movie lovers', 'Talk about favorite films, genres, and upcoming releases.', 'Private', 4),
--     ('art_adepts', 'Art and Design Collective', 'A space for artists and designers', 'Showcase artwork, discuss design techniques, and collaborate.', 'Public', 5);


-- INSERT INTO Tag (tag_name) 
-- VALUES 
--     ('events'),
--     ('technology'),
--     ('books'),
--     ('fitness'),
--     ('movies'),
--     ('art'),
--     ('health'),
--     ('education'),
--     ('gaming'),
--     ('science');


-- INSERT INTO Community_has_Tag (tag_id, community_id) 
-- VALUES 
--     (1, 1),
--     (2, 1), 
--     (3, 2), 
--     (4, 2), 
--     (5, 3), 
--     (6, 3), 
--     (7, 4), 
--     (8, 4), 
--     (9, 5), 
--     (10, 5); 


-- INSERT INTO User_has_Community (user_id, community_id, role) 
-- VALUES 
-- 		(1,1,'Admin'),
-- 		(2,2,'Admin'),
-- 		(3,3,'Admin'),
-- 		(4,4,'Admin'),
-- 		(5,5,'Admin');


-- create trigger post_del before delete on Post for each row
-- BEGIN 
-- 	delete from Post_Like where post_id=OLD.post_id;
-- 	delete from Comment where post_id=OLD.post_id;
-- END

-- create trigger comment_del before delete on Comment for each row
-- BEGIN 
-- 	delete from Comment_Like where comment_id=OLD.comment_id;
-- 	delete from Reply where comment_id=OLD.comment_id;
-- END

-- create trigger course_del before delete on Course for each row
-- BEGIN 
-- 	delete from Video where course_id=OLD.course_id;
-- END

-- create trigger leave_comm before delete on User_has_Community for each row
-- BEGIN 
-- 	delete from Post where user_id=OLD.user_id;
-- END


